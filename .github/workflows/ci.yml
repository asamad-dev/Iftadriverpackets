name: 🧪 CI Tests

# Trigger the workflow on push to main branch and pull requests to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: ⚙️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/test_requirements.txt
        
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=src/gemini_processor.py
        # Exit-zero treats all errors as warnings. Line length should be 88 for black compatibility
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=src/gemini_processor.py
        
    - name: 🎨 Check code formatting with black
      run: |
        black --check --diff src/ --exclude=gemini_processor.py
        
    - name: 📋 Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports --exclude=gemini_processor.py
        
    - name: 🧪 Run configuration tests
      run: |
        python run_tests.py config
        
    - name: 🧪 Run unit tests
      run: |
        python run_tests.py unit
        
    - name: 📊 Run tests with coverage
      run: |
        python run_tests.py coverage
        
    - name: 📈 Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'  # Only upload once
      uses: codecov/codecov-action@v3
      with:
        file: ./htmlcov/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: ⚙️ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test/test_requirements.txt
        
    - name: 🔗 Run integration tests (without API keys)
      run: |
        # Run integration tests that don't require real API keys
        python -m pytest test/test_config_integration.py -v
        
    - name: ✅ Test streamlit app import
      run: |
        # Test that streamlit app can be imported without errors
        python -c "import sys; sys.path.append('src'); from main_processor import DriverPacketProcessor; print('✅ Import successful!')"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 🔒 Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 📦 Check for known vulnerabilities in dependencies
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
